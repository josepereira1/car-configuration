/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentation;

import business.comercial.Componente;
import business.comercial.Configuracao;
import business.comercial.ConfiguracaoNaoExisteException;
import business.comercial.Modelo;
import business.comercial.Pacote;
import java.util.Collection;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author ricardopetronilho
 */
public class JIniciarProducao extends javax.swing.JFrame {
    
    private JLogin jLogin;
    private String chaveConfiguracao;
    
    private JMenuFuncionarioFabrica parent;

    /**
     * Creates new form ListarConfiguracoes
     */
    public JIniciarProducao(JLogin jLogin, JMenuFuncionarioFabrica parent) {
        initComponents();
        
        this.setResizable(false);
        this.jTextAreaConfiguracaoAtual.setEditable(false);
        
        this.jLogin = jLogin;
        this.parent = parent;
        
        this.reset();
    }
    
    private void updateConfiguracoesAProduzir() {
        Collection<Configuracao> configuracoes = this.jLogin.getSingleton().getConfiguracoesAProduzir();
        DefaultListModel model = new DefaultListModel(); // abstracao visual dos dados
        if (configuracoes.isEmpty()) model.addElement("Sem configurações prontas a produzir");
        else {  
            for(Configuracao c: configuracoes)
                model.addElement(c.getId() + " - Configuração");
        }
        this.jListConfiguracoes.setModel(model);
    }
    
    private void reset() {
        this.chaveConfiguracao = "";
        this.jTextAreaConfiguracaoAtual.setText("Nenhuma configuração selecionada");
        this.updateConfiguracoesAProduzir();
    }
    
    private void updateConfiguracao() {
        try {
            
            if (this.jLogin.getSingleton().getDAOFacade().getConfiguracoes().containsKey(chaveConfiguracao) == false)
                throw new ConfiguracaoNaoExisteException(chaveConfiguracao);  

            Configuracao c = jLogin.getSingleton().getDAOFacade().getConfiguracoes().get(chaveConfiguracao);
            Modelo m = jLogin.getSingleton().getDAOFacade().getModelos().get(c.getModelo());
            Componente motor = jLogin.getSingleton().getDAOFacade().getComponentes().get(c.getMotor());
            Collection<Componente> exteriores = jLogin.getSingleton().getExteriorConfiguracao(chaveConfiguracao);
            Collection<Componente> interiores = jLogin.getSingleton().getInteriorConfiguracao(chaveConfiguracao);
            Collection<Pacote> pacotes = jLogin.getSingleton().getPacotesConfiguracao(chaveConfiguracao);

            String s = "";

            if (c.getModelo().equals("-1")) s = s + "Modelo = Não selecionado" + "\n\n"; 
            else s = s + "Modelo = " + m.getDesignacao()  + "\n\n";

            if (c.getMotor().equals("-1")) s = s + "Motorozicao = Não selecionado" + "\n\n";   
            else s = s + "Motorizacao = " + motor.getDesignacao() + "\n\n";
            
            if(c.getExteriores().isEmpty()) s = s + "Exteriores = Não selecionado" + "\n\n"; 
            else{ 
                s = s + "Exterior = \n";
                for(Componente p: exteriores) 
                    s = s + p.getDesignacao() + "\n";
            }

            if(c.getInteriores().isEmpty()) s = s + "\nInteriores = Não selecionado" + "\n\n";
            else{
                s = s + "\nInterior = \n";
                for(Componente p: interiores)
                    s = s + p.getDesignacao() + "\n";	
            }

            if(c.getPacotes().isEmpty()) s = s + "\nPacotes = Não selecionado" + "\n\n"; 
            else{
                s = s + "\nPacote = \n";
                for(Pacote pacote: pacotes)
                    s = s + pacote.getNome() + "\n";	
            }
            
            this.jTextAreaConfiguracaoAtual.setText(s);

        } catch (ConfiguracaoNaoExisteException e) {
            JOptionPane.showMessageDialog(this, "Erro interno, configuração não existe no sistema!","ERRO", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListConfiguracoes = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaConfiguracaoAtual = new javax.swing.JTextArea();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Configurações em espera:");

        jListConfiguracoes.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Sem configurações prontas a produzir" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jListConfiguracoes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListConfiguracoesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jListConfiguracoes);

        jLabel4.setText("Componentes da configuração selecionada:");

        jButton1.setText("Iniciar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Voltar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextAreaConfiguracaoAtual.setColumns(20);
        jTextAreaConfiguracaoAtual.setRows(5);
        jTextAreaConfiguracaoAtual.setText("Nenhuma configuração selecionada");
        jScrollPane1.setViewportView(jTextAreaConfiguracaoAtual);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (this.chaveConfiguracao.equals("") == false) {
            try {
                boolean temStock = this.jLogin.getSingleton().temStock(this.chaveConfiguracao);
                if (temStock == true) {
                    this.jLogin.getSingleton().removeConfiguracao(this.chaveConfiguracao);
                    JOptionPane.showMessageDialog(this, "A configuração foi apagada do sistema!","AVISO", JOptionPane.INFORMATION_MESSAGE);  
                    this.reset();
                } else {
                    JOptionPane.showMessageDialog(this, "Não tem stock suficiente para iniciar a produção!","ERRO", JOptionPane.ERROR_MESSAGE);     
                }
            } catch (ConfiguracaoNaoExisteException e) {
                JOptionPane.showMessageDialog(this, "Erro interno, configuração não existe no sistema!","ERRO", JOptionPane.ERROR_MESSAGE);     
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor selecione uma configuração!","AVISO", JOptionPane.WARNING_MESSAGE);                 
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.parent.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jListConfiguracoesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListConfiguracoesMouseClicked
        
        if (evt.getClickCount() == 2) { // Double-click detected
            
            int index = -1; // não selecionou nada
            String id = "";

            // vai buscar o index (posição no JList) da configuração selecionada
            if ( (index = this.jListConfiguracoes.locationToIndex(evt.getPoint())) >= 0 ) {
                id = this.jListConfiguracoes.getSelectedValue().split(" ")[0];  
            }
            
            if (id.equals("") == false) { // selecionou algo
                this.chaveConfiguracao = id;
                this.updateConfiguracao();
            }
        }
    }//GEN-LAST:event_jListConfiguracoesMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.setVisible(false);
        this.parent.setVisible(true);
    }//GEN-LAST:event_formWindowClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jListConfiguracoes;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextAreaConfiguracaoAtual;
    // End of variables declaration//GEN-END:variables
}
