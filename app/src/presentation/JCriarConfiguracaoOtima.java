/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentation;

import business.comercial.Componente;
import business.comercial.ComponenteNaoExisteException;
import business.comercial.Configuracao;
import business.comercial.ConfiguracaoNaoExisteException;
import business.comercial.Modelo;
import business.comercial.ModeloNaoExisteException;
import business.comercial.Pacote;
import business.comercial.PacoteNaoExisteException;
import java.util.Collection;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author rafaela
 */
public class JCriarConfiguracaoOtima extends javax.swing.JFrame {
    
    public JLogin jFacade;    //  facade do package presentation
    private JMenuFuncionarioStand parent;
    public String chaveConfiguracao;
    public int estado;

    /**
     * Creates new form JConfiguracaoOtima
     */
    public JCriarConfiguracaoOtima(JLogin facade, JMenuFuncionarioStand parent) {
        initComponents();
              
        this.setResizable(false);
        
        this.jFacade = facade;
        this.parent = parent;
        this.chaveConfiguracao = jFacade.getSingleton().criarConfiguracao(this.parent.getId()); // inicia/ cria a configuração
        this.estado = 0;
        
        this.updateModelos();
        this.updateConfiguracao();
     }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListModelos = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        preco = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Preço limite");

        jScrollPane1.setViewportView(jListModelos);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jLabel2.setText("Configuração atual");

        jButton2.setText("Selecionar Modelo");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Gerar proposta");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Reset");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Cancelar");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton5MouseExited(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Aceitar proposta");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(preco, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton6)
                        .addContainerGap(25, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(preco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    // BOTÃO SELECIONAR
    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        
        int index = -1; // não selecionou nada
        String id = "";
        
        try {
            // vai buscar o index (posição no JList) do sercidor selecionado
            if ( (index = this.jListModelos.locationToIndex(evt.getPoint())) >= 0 ) {
                id = this.jListModelos.getSelectedValue().split(" ")[0];  
            }
        } catch (NullPointerException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Não selecionou nada!","AVISO", JOptionPane.WARNING_MESSAGE);
        } 
       
        if (estado == 0) { // SELECIONAR O MODELO
            
            try {
                if (id.equals("") == false) { // selecionou algo 
                    
                    System.out.println("modelo= "+ id);
                    jFacade.getSingleton().setModelo(id, this.chaveConfiguracao);
                    this.estado = 1;
                    
                    // Atualiza JList da configuracao atual
                    this.updateConfiguracao();
                }
            } catch (ConfiguracaoNaoExisteException e) {
                JOptionPane.showMessageDialog(this, "Erro interno, configuração não existe no sistema!","ERRO", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            } catch (ModeloNaoExisteException e) {
                JOptionPane.showMessageDialog(this, "Erro interno, modelo não existe no sistema","ERRO", JOptionPane.ERROR_MESSAGE);    
                e.printStackTrace();
            }
    }//GEN-LAST:event_jButton2MouseClicked

        else {
            JOptionPane.showMessageDialog(this, "O modelo já foi selecionado!","AVISO", JOptionPane.WARNING_MESSAGE);     
        }
    }
    
    private void jButton5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5MouseExited

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            jFacade.getSingleton().removeConfiguracao(this.chaveConfiguracao); // Remove configuracao atual
            this.chaveConfiguracao = jFacade.getSingleton().criarConfiguracao(this.parent.getId()); // cria uma nova
            this.estado = 0;
            this.updateModelos(); // atualiza os modelos
            this.updateConfiguracao(); // atualiza o jList da configuracao Atual
            JOptionPane.showMessageDialog(this, "A configuração atual foi apagada!","AVISO", JOptionPane.WARNING_MESSAGE);  
        } catch (ConfiguracaoNaoExisteException e) {
            JOptionPane.showMessageDialog(this, "Erro interno, configuração não existe no sistema!","ERRO", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
 
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

     if (this.estado == 1) {
            try {
                float valorDisposto = Float.parseFloat(this.preco.getText());
                float valorMinimo = this.jFacade.getSingleton().getDAOFacade().getConfiguracoes().get(this.chaveConfiguracao).getPreco();
                if(valorDisposto < valorMinimo) JOptionPane.showMessageDialog(this, "Valor insuficiente para o modelo selecionado. Por favor, introduza um valor superior a " + valorMinimo, "AVISO", JOptionPane.WARNING_MESSAGE);
                else {
                    this.jFacade.getSingleton().getPropostaValida(valorDisposto,this.chaveConfiguracao);
                    this.estado = 2;
                    this.updateConfiguracao();
                }
            } catch (ConfiguracaoNaoExisteException e) {
                e.printStackTrace();
            } catch (ModeloNaoExisteException e) {
                e.printStackTrace();
            } catch (ComponenteNaoExisteException e) {
                e.printStackTrace();
            } catch (PacoteNaoExisteException e) {
                e.printStackTrace();
            } catch (NumberFormatException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Por favor introduza um número correto!","ERRO", JOptionPane.ERROR_MESSAGE);  
            }
        } else if (this.estado == 0) {
            JOptionPane.showMessageDialog(this, "Por favor selecione o modelo primeiro!","AVISO", JOptionPane.WARNING_MESSAGE);  
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked

    }//GEN-LAST:event_jButton6MouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
       if (this.estado == 2) {
            try {
                jFacade.getSingleton().submeterFabrica(this.chaveConfiguracao);
                JOptionPane.showMessageDialog(this, "A configuração foi submetida com sucesso!","SUCESSO", JOptionPane.INFORMATION_MESSAGE);  
                this.parent.setVisible(true);
                this.setVisible(false);
            } catch (ConfiguracaoNaoExisteException e) {
                e.printStackTrace();
            }
        } else if (this.estado == 0) {
            JOptionPane.showMessageDialog(this, "Por favor seleciona o modelo primeiro!","AVISO", JOptionPane.WARNING_MESSAGE);  
        } else if (this.estado == 1) {
            JOptionPane.showMessageDialog(this, "Por favor proponha uma configuração primeiro!","AVISO", JOptionPane.WARNING_MESSAGE);  
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            jFacade.getSingleton().removeConfiguracao(this.chaveConfiguracao); // Remove configuracao atual
            JOptionPane.showMessageDialog(this, "A configuração atual foi apagada!","AVISO", JOptionPane.WARNING_MESSAGE);
        } catch (ConfiguracaoNaoExisteException e) {
            JOptionPane.showMessageDialog(this, "Erro interno, configuração não existe no sistema!","ERRO", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } finally {
           this.setVisible(false);
           this.parent.setVisible(true);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            jFacade.getSingleton().removeConfiguracao(this.chaveConfiguracao); // Remove configuracao atual
            JOptionPane.showMessageDialog(this, "A configuração atual foi apagada!","AVISO", JOptionPane.WARNING_MESSAGE);
        } catch (ConfiguracaoNaoExisteException e) {
            JOptionPane.showMessageDialog(this, "Erro interno, configuração não existe no sistema!","ERRO", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } finally {
           this.setVisible(false);
           this.parent.setVisible(true);
        }
    }//GEN-LAST:event_formWindowClosing

  
    private void updateModelos() {
        DefaultListModel model = new DefaultListModel(); // abstracao visual dos dados
        for(Modelo m: jFacade.getSingleton().getCatalogo()) {
            model.addElement(m.getId() + " - " + m.prettyPrint());
        }
        this.jListModelos.setModel(model);
}
    
    private void updateConfiguracao() {
        try {
            
            if (this.jFacade.getSingleton().getDAOFacade().getConfiguracoes().containsKey(chaveConfiguracao) == false)
                throw new ConfiguracaoNaoExisteException(chaveConfiguracao);  

            Configuracao c = jFacade.getSingleton().getDAOFacade().getConfiguracoes().get(chaveConfiguracao);
            Modelo m = jFacade.getSingleton().getDAOFacade().getModelos().get(c.getModelo());
            Componente motor = jFacade.getSingleton().getDAOFacade().getComponentes().get(c.getMotor());
            Collection<Componente> exteriores = jFacade.getSingleton().getExteriorConfiguracao(chaveConfiguracao);
            Collection<Componente> interiores = jFacade.getSingleton().getInteriorConfiguracao(chaveConfiguracao);
            Collection<Pacote> pacotes = jFacade.getSingleton().getPacotesConfiguracao(chaveConfiguracao);

            String s = "";

            if (c.getModelo().equals("-1")) s = s + "Modelo = Não selecionado" + "\n\n"; 
            else s = s + "Modelo = " + m.getDesignacao()  + "\n\n";

            if (c.getMotor().equals("-1")) s = s + "Motorozicao = Não selecionado" + "\n\n";   
            else s = s + "Motorizacao = " + motor.getDesignacao() + "\n\n";
            
            if(c.getExteriores().isEmpty()) s = s + "Exteriores = Não selecionado" + "\n\n"; 
            else{ 
                s = s + "Exterior = \n";
                for(Componente p: exteriores) 
                    s = s + p.getDesignacao() + "\n";
            }

            if(c.getInteriores().isEmpty()) s = s + "\nInteriores = Não selecionado" + "\n\n";
            else{
                s = s + "\nInterior = \n";
                for(Componente p: interiores)
                    s = s + p.getDesignacao() + "\n";	
            }

           s = s + "\nPreço = " + c.getPreco();
            
            this.jTextArea1.setText(s);

        } catch (ConfiguracaoNaoExisteException e) {
            JOptionPane.showMessageDialog(this, "Erro interno, configuração não existe no sistema!","ERRO", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jListModelos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField preco;
    // End of variables declaration//GEN-END:variables
}
